#!/usr/bin/env bash

set -e

SCRIPT_PATH=$(dirname "$(realpath $0)")
PREFIX=
DOWNLOAD_CACHE=work
OPENRESTY_VER=
OPENSSL_VER=
LUAROCKS_VER=
PCRE_VER=
BUILD_CACHE=1
ARTIFACT_CACHE=1
OPENRESTY_PATCHES=1
DEBUG=0
NPROC=`nproc`
OS=
OS_VER=
NGINX_EXTRA_MODULES=()

PARAMS=""

main() {
  while (( "$#" )); do
    case "$1" in
      -p|--prefix)
        PREFIX=$2
        shift 2
        ;;
      -j|--jobs)
        NPROC=$2
        shift 2
        ;;
      --pcre)
        PCRE_VER=$2
        shift 2
        ;;
      --pcre_sha)
        PCRE_SHA=$2
        shift 2
        ;;
      --openresty)
        OPENRESTY_VER=$2
        shift 2
        ;;
      --openresty_sha)
        OPENRESTY_SHA=$2
        shift 2
        ;;
      --openssl)
        OPENSSL_VER=$2
        shift 2
        ;;
      --openssl_sha)
        OPENSSL_SHA=$2
        shift 2
        ;;
      --luarocks)
        LUAROCKS_VER=$2
        shift 2
        ;;
      --luarocks_sha)
        LUAROCKS_SHA=$2
        shift 2
        ;;
      --no-build-cache)
        BUILD_CACHE=0
        shift 1
        ;;
      --no-artifact-cache)
        ARTIFACT_CACHE=0
        shift 1
        ;;
      --no-openresty-patches)
        OPENRESTY_PATCHES=0
        shift 1
        ;;
      --debug)
        DEBUG=1
        shift 1
        ;;
      --work)
        DOWNLOAD_CACHE=$2
        shift 2
        ;;
      --add-module)
        NGINX_EXTRA_MODULES+=("--add-module=$2")
        shift 2
        ;;
      -h|--help)
        show_usage
        exit 0
        ;;
      --) # end argument parsing
        shift
        break
        ;;
      -*|--*=) # unsupported flags
        echo "Error: Unsupported flag $1" >&2
        exit 1
        ;;
      *) # preserve positional arguments
        PARAMS="$PARAMS $1"
        shift
        ;;
    esac
  done
  # set positional arguments in their proper place
  eval set -- "$PARAMS"

  if [ -z "$PREFIX" ]; then
    show_usage
    fatal "prefix can not be empty"
  fi

  PREFIX=`realpath $PREFIX`

  if [ -z "$OPENRESTY_VER" ]; then
    show_usage
    fatal "OpenResty version can not be empty"
  fi

  if [ -z "$OPENSSL_VER" ]; then
    show_usage
    fatal "OpenSSL version can not be empty"
  fi

  # retrieve OS info of OS-specific patches

  if [ -f /etc/os-release ]; then
    . /etc/os-release
    OS=$NAME
    OS_VER=$VERSION_ID

  elif type lsb_release >/dev/null 2>&1; then
    OS=$(lsb_release -si)
    OS_VER=$(lsb_release -sr)
  fi

  if [ $BUILD_CACHE == 0 ]; then
      rm -rf $DOWNLOAD_CACHE
  fi

  if [ $ARTIFACT_CACHE == 0 ]; then
      rm -rf $PREFIX
  fi

  OPENSSL_DOWNLOAD=$DOWNLOAD_CACHE/openssl-$OPENSSL_VER
  OPENRESTY_DOWNLOAD=$DOWNLOAD_CACHE/openresty-$OPENRESTY_VER
  OPENRESTY_PATCHES_DOWNLOAD=$DOWNLOAD_CACHE/openresty-patches-master

  mkdir -p $DOWNLOAD_CACHE $PREFIX

  notice "Building the components now..."

  OPENSSL_INSTALL=${OPENSSL_INSTALL:-$PREFIX/openssl}
  OPENRESTY_INSTALL=$PREFIX/openresty

  if [ ! -d $OPENSSL_INSTALL ]; then
    if [ ! -d $OPENSSL_DOWNLOAD ]; then
      warn "OpenSSL source not found, downloading..."
      pushd $DOWNLOAD_CACHE
        curl -sSLO https://www.openssl.org/source/openssl-$OPENSSL_VER.tar.gz
        if [ ! -z ${OPENSSL_SHA+x} ]; then
          echo "$OPENSSL_SHA openssl-$OPENSSL_VER.tar.gz" | sha256sum -c -
        fi
        tar -xzvf openssl-$OPENSSL_VER.tar.gz
      popd
    fi

    notice "Building OpenSSL..."

    pushd $OPENSSL_DOWNLOAD
      if [[ ($OPENSSL_VER == 1.0.* && ! -d include/openssl) || ! -f Makefile ]]; then
          OPENSSL_OPTS=(
            "shared"
            "--prefix=$OPENSSL_INSTALL"
          )

          if [[ $OPENSSL_VER == 1.1.* ]]; then
            OPENSSL_OPTS+=('no-unit-test')

          else
            OPENSSL_OPTS+=('no-tests')
          fi

          if [ $DEBUG == 1 ]; then
            OPENSSL_OPTS+=('-d')
          fi

        eval ./config ${OPENSSL_OPTS[*]}
      fi

      make -j$NPROC
      make install_sw
    popd

    succ "OpenSSL $OPENSSL_VER has been built successfully!"

  else
    succ "OpenSSL $OPENSSL_VER has been built successfully (cached)!"
  fi

  if [ ! -d $OPENRESTY_INSTALL ]; then
    if [[ $OPENRESTY_PATCHES == 0 && -f $OPENRESTY_DOWNLOAD/bundle/.patch_applied ]]; then
      notice "Patched OpenResty found, removing..."
      rm -rf $OPENRESTY_DOWNLOAD

    elif [[ $OPENRESTY_PATCHES == 1 && ! -f $OPENRESTY_DOWNLOAD/bundle/.patch_applied ]]; then
      rm -f $OPENRESTY_DOWNLOAD/Makefile
    fi


    if [ ! -d $OPENRESTY_DOWNLOAD ]; then
      warn "OpenResty source not found, downloading..."
      pushd $DOWNLOAD_CACHE
        curl -sSLO https://openresty.org/download/openresty-$OPENRESTY_VER.tar.gz
        if [ ! -z ${OPENRESTY_SHA+x} ]; then
          echo "$OPENRESTY_SHA openresty-$OPENRESTY_VER.tar.gz" | sha256sum -c -
        fi
        tar -xzvf openresty-$OPENRESTY_VER.tar.gz
      popd
    fi

    if [[ $OPENRESTY_PATCHES == 1 && ! -d $OPENRESTY_PATCHES_DOWNLOAD ]]; then
      warn "Kong OpenResty patches not found, downloading..."
      pushd $DOWNLOAD_CACHE
        curl -s -S -L https://github.com/Kong/openresty-patches/archive/master.tar.gz | tar xz
      popd
    fi
    
    if [ ! -z "$PCRE_VER" ]; then
      PCRE_DOWNLOAD=$DOWNLOAD_CACHE/pcre-$PCRE_VER
      PCRE_LOCATION=`realpath $PCRE_DOWNLOAD`
      if [ ! -d $PCRE_DOWNLOAD ]; then
        warn "PCRE source not found, downloading..."
        pushd $DOWNLOAD_CACHE
          curl -sSLO https://ftp.pcre.org/pub/pcre/pcre-${PCRE_VER}.tar.gz
          if [ ! -z ${PCRE_SHA+x} ]; then
            echo "$PCRE_SHA pcre-${PCRE_VER}.tar.gz" | sha256sum -c -
          fi
          tar -xzvf pcre-${PCRE_VER}.tar.gz
        popd
      fi
    fi

    warn "Building OpenResty..."

    OPENRESTY_PATCHES_DOWNLOAD=`realpath $OPENRESTY_PATCHES_DOWNLOAD`

    pushd $OPENRESTY_DOWNLOAD
      if [ ! -f Makefile ]; then
        OPENRESTY_OPTS=(
          "--prefix=$OPENRESTY_INSTALL"
          "--with-cc-opt='-I$OPENSSL_INSTALL/include'"
          "--with-ld-opt='-L$OPENSSL_INSTALL/lib -Wl,-rpath,$OPENSSL_INSTALL/lib'"
          "--with-pcre-jit"
          "--with-http_ssl_module"
          "--with-http_realip_module"
          "--with-http_stub_status_module"
          "--with-http_v2_module"
          "--with-stream_ssl_preread_module"
          "--with-stream_realip_module"
          "-j$NPROC"
        )
        
        if [ ! -z "$PCRE_VER" ]; then
          OPENRESTY_OPTS+=('--with-pcre=$PCRE_LOCATION')
        fi

        OPENRESTY_OPTS+=(${NGINX_EXTRA_MODULES[@]})

        if [ $DEBUG == 1 ]; then
          OPENRESTY_OPTS+=('--with-debug')
          OPENRESTY_OPTS+=('--with-luajit-xcflags="-DLUAJIT_USE_VALGRIND -DLUA_USE_ASSERT -DLUA_USE_APICHECK -DLUAJIT_USE_SYSMALLOC"')
        fi

        if [ $OPENRESTY_PATCHES == 1 ]; then
          pushd bundle
            if [ ! -f .patch_applied ]; then
              for patch_file in $(ls -1 $OPENRESTY_PATCHES_DOWNLOAD/patches/$OPENRESTY_VER/*.patch); do
                echo "Applying OpenResty patch $patch_file"
                patch -p1 < $patch_file
              done

              touch .patch_applied
            fi
          popd
        fi

        # apply non Kong-specific patches

        if [[ $OPENRESTY_VER == 1.13.6.* ]]; then
          if [[ $OS == "Fedora" && $OS_VER -gt 28 ]]; then
            notice "Fedora 28 or above detected, applying 'rm_glibc_crypt_r_workaround' patch..."
            pushd bundle/nginx-1.13.6
              patch --forward -p1 < $SCRIPT_PATH/patches/nginx-1.13.6-rm_glibc_crypt_r_workaround.patch || true
            popd
          fi
        fi

        eval ./configure ${OPENRESTY_OPTS[*]}
      fi

      make -j$NPROC
      make install
    popd

    succ "OpenResty $OPENRESTY_VER has been built successfully!"

  else
    succ "OpenResty $OPENRESTY_VER has been built successfully (cached)!"
  fi


  if [ ! -z "$LUAROCKS_VER" ]; then
    LUAROCKS_INSTALL=$PREFIX/luarocks

    if [ ! -d $LUAROCKS_INSTALL ]; then
      LUAROCKS_DOWNLOAD=$DOWNLOAD_CACHE/luarocks-$LUAROCKS_VER

      if [ ! -d $LUAROCKS_DOWNLOAD ]; then
        warn "LuaRocks source not found, downloading..."
        pushd $DOWNLOAD_CACHE
          curl -sSLO https://luarocks.org/releases/luarocks-$LUAROCKS_VER.tar.gz
          if [ ! -z ${LUAROCKS_SHA+x} ]; then
            echo "$LUAROCKS_SHA luarocks-$LUAROCKS_VER.tar.gz" | sha256sum -c -
          fi
          tar -xzvf luarocks-$LUAROCKS_VER.tar.gz
        popd
      fi

      warn "Building LuaRocks..."

      pushd $LUAROCKS_DOWNLOAD
        if [ ! -f config.unix ]; then
          ./configure \
            --prefix=$LUAROCKS_INSTALL \
            --lua-suffix=jit \
            --with-lua=$OPENRESTY_INSTALL/luajit \
            --with-lua-include=$OPENRESTY_INSTALL/luajit/include/luajit-2.1
        fi

        make build -j$NPROC
        make install
      popd

      succ "LuaRocks $LUAROCKS_VER has been built successfully!"

    else
      succ "LuaRocks $LUAROCKS_VER has been built successfully (cached)!"
    fi
  fi

  if [ $BUILD_CACHE == 0 ]; then
      rm -rf $DOWNLOAD_CACHE
  fi

  succ "Build finished in $SECONDS seconds. Enjoy!"
}

show_usage() {
  echo "Build basic components (OpenResty, OpenSSL and LuaRocks for Kong)"
  echo ""
  echo "Usage: $0 [options...] -p <prefix> --openresty <openresty_ver> --openssl <openssl_ver>"
  echo ""
  echo "Required arguments:"
  echo "  -p, --prefix                  location where components should be installed to"
  echo "      --openresty               version of OpenResty to build, such as 1.13.6.2"
  echo "      --openssl                 version of OpenSSL to build, such as 1.1.1b"
  echo "Optional arguments:"
  echo "      --no-build-cache          disable compilation caching and re-download source code to"
  echo "                                build from scratch"
  echo -e "                                \033[1;31mWARNING:\033[0m this removes everything inside the work directory"
  echo "      --no-artifact-cache       disable artifact caching and re-install all the softwares"
  echo -e "                                \033[1;31mWARNING:\033[0m this removes everything inside the prefix directory"
  echo "      --no-openresty-patches    do not apply openresty-patches while compiling OpenResty, patching is"
  echo "                                enabled by default"
  echo "      --luarocks                version of LuaRocks to build, such as 3.0.4. if absent LuaRocks"
  echo "                                will not be built"
  echo "      --add-module              path to additional NGINX module to be built, this option can be repeated"
  echo "                                and will be passed to NGINX's configure in the order they were specified"
  echo "      --debug                   disable compile time optimizations and memory pooling for NGINX,"
  echo "                                LuaJIT and OpenSSL to help debugging"
  echo "      -j, --jobs                concurrency level to use when building, defaults to number of CPU"
  echo "                                cores available ($NPROC)"
  echo "      --work                    the working directory to use while compiling, defaults to \"work\""
  echo "  -h, --help                    show this usage"
}

notice() {
    builtin echo -en "\033[1m"
    echo "NOTICE: $@"
    builtin echo -en "\033[0m"
}

succ() {
    builtin echo -en "\033[1;32m"
    echo "SUCCESS: $@"
    builtin echo -en "\033[0m"
}

warn() {
    builtin echo -en "\033[1;33m"
    echo "WARN: $@"
    builtin echo -en "\033[0m"
}

fatal() {
    builtin echo -en "\033[1;31m"
    echo "FATAL: $@"
    builtin echo -en "\033[0m"
    exit 1
}

err() {
    builtin echo -en "\033[1;31m"
    echo "ERR: $@"
    builtin echo -en "\033[0m"
    exit 1
}


main $@
